Conversation opened. 6 messages. All messages read.

Skip to content
Using Utah County Academy of Sciences Mail with screen readers
dessert shop 5 
1 of 3
(no subject)
External
Inbox

non_existent:P
Fri, Nov 15, 8:15 AM
Desserts.pyfrom abc import ABC, abstractmethod class DessertItem(ABC): tax_percent = 7.25 def __init__(self, name: str = ''): self.name = name @abstractmethod d
3

non_existent:P
Tue, Nov 19, 12:18 PM
def user_prompt_sundae(self): name = input("Enter the type of ice cream for the sundae: ").strip() topping_price = float(input("Enter the price of the topping:

non_existent:P
Mon, Nov 25, 11:12 PM
to me

I tried to fix some stuff for dessert shop 4


        name = input("Enter the type of sundae: ").strip()
        while True:
            try:
                scoops = int(input("Enter the number of scoops: "))
                if scoops < 0:
                    raise ValueError
                break
            except ValueError:
                print("Invalid number of scoops. Please enter a positive integer.")

        while True:
            try:
                price_per_scoop = float(input("Enter the price per scoop: "))
                if price_per_scoop < 0:
                    raise ValueError
                break
            except ValueError:
                print("Invalid price. Please enter a positive number.")

        topping_name = input("Enter the topping name: ").strip()
        while True:
            try:
                topping_price = float(input("Enter the topping price: "))
                if topping_price < 0:
                    raise ValueError
                break
            except ValueError:
                print("Invalid price. Please enter a positive number.")

        return Sundae(name, scoops, price_per_scoop, topping_name, topping_price)


def main():
    shop = DessertShop()
    order = Order()

    done = False
    prompt = '\n'.join([
        '\n',
        '1: Candy',
        '2: Cookie',
        '3: Ice Cream',
        '4: Sundae',
        '\nWhat would you like to add to the order? (1-4, Enter for done): '
    ])

    while not done:
        choice = input(prompt).strip()
        match choice:
            case '':
                done = True
            case '1':
                item = shop.user_prompt_candy()
                order.add(item)
                print(f'{item.name} has been added to your order.')
            case '2':
                item = shop.user_prompt_cookie()
                order.add(item)
                print(f'{item.name} has been added to your order.')
            case '3':
                item = shop.user_prompt_icecream()
                order.add(item)
                print(f'{item.name} has been added to your order.')
            case '4':
                item = shop.user_prompt_sundae()
                order.add(item)
                print(f'{item.name} has been added to your order.')
            case _:
                print('Invalid response: Please enter a choice from the menu (1-4) or Enter.')

    if order.items:
        print("\nGenerating receipt...")
        # Format the items in the order for PDF
        order_items = [
            {
                "name": item.name,
                "cost": f"${item.calculate_cost():.2f}",
                "tax": f"${item.calculate_tax():.2f}"
            }
            for item in order.items
        ]

        # Totals
        subtotal = f"${order.calculate_subtotal():.2f}"
        tax = f"${order.calculate_total_tax():.2f}"
        total = f"${order.calculate_total_cost():.2f}"
        total_items = len(order.items)

        # Generate the receipt PDF
        generate_receipt(order_items, subtotal, tax, total, total_items)
        print("Receipt saved as 'receipt.pdf'.")
    else:
        print("No items in the order. No receipt generated.")


if __name__ == "__main__":
    main()







dessert shop 5
dessert.py----
from math import ceil


class DessertItem:
    def calculate_cost(self):
        raise NotImplementedError("This method should be implemented in subclasses.")

    def calculate_tax(self):
        return ceil(self.calculate_cost() * 0.07 * 100) / 100


class Candy(DessertItem):
    def __init__(self, name, weight, price_per_lb):
        self.name = name
        self.weight = weight
        self.price_per_lb = price_per_lb

    def calculate_cost(self):
        return self.weight * self.price_per_lb

    def __str__(self):
        cost = f"${self.calculate_cost():.2f}"
        tax = f"${self.calculate_tax():.2f}"
        return f"{self.name}, {self.weight}lbs, ${self.price_per_lb:.2f}/lb, {cost}, {tax}"


class Cookie(DessertItem):
    def __init__(self, name, quantity, price_per_dozen):
        self.name = name
        self.quantity = quantity
        self.price_per_dozen = price_per_dozen

    def calculate_cost(self):
        return (self.quantity / 12) * self.price_per_dozen

    def __str__(self):
        cost = f"${self.calculate_cost():.2f}"
        tax = f"${self.calculate_tax():.2f}"
        return f"{self.name}, {self.quantity} cookies, ${self.price_per_dozen:.2f}/dozen, {cost}, {tax}"


class IceCream(DessertItem):
    def __init__(self, name, scoops, price_per_scoop):
        self.name = name
        self.scoops = scoops
        self.price_per_scoop = price_per_scoop

    def calculate_cost(self):
        return self.scoops * self.price_per_scoop

    def __str__(self):
        cost = f"${self.calculate_cost():.2f}"
        tax = f"${self.calculate_tax():.2f}"
        return f"{self.name}, {self.scoops} scoops, ${self.price_per_scoop:.2f}/scoop, {cost}, {tax}"


class Sundae(IceCream):
    def __init__(self, name, scoops, price_per_scoop, topping_name, topping_price):
        super().__init__(name, scoops, price_per_scoop)
        self.topping_name = topping_name
        self.topping_price = topping_price

    def calculate_cost(self):
        return super().calculate_cost() + self.topping_price

    def __str__(self):
        cost = f"${self.calculate_cost():.2f}"
        tax = f"${self.calculate_tax():.2f}"
        ice_cream_details = super().__str__()
        return f"{self.topping_name} {ice_cream_details}\n{self.topping_name} topping, 1, ${self.topping_price:.2f}"

order___
class Order:
    def __init__(self):
        self.items = []

    def add(self, item):
        self.items.append(item)

    def calculate_subtotal(self):
        return sum(item.calculate_cost() for item in self.items)

    def calculate_total_tax(self):
        return sum(item.calculate_tax() for item in self.items)

    def calculate_total_cost(self):
        return self.calculate_subtotal() + self.calculate_total_tax()

    def __str__(self):
        item_lines = "\n".join(str(item) for item in self.items)
        subtotal = f"${self.calculate_subtotal():.2f}"
        tax = f"${self.calculate_total_tax():.2f}"
        total = f"${self.calculate_total_cost():.2f}"
        return (
            f"Items in Order:\n{item_lines}\n"
            f"------------------------------\n"
            f"Order Subtotal: {subtotal}\n"
            f"Order Tax: {tax}\n"
            f"Order Total: {total}"
        )


dessertshop-------
from desserts import Order, Candy, Cookie, IceCream, Sundae
from receipt import generate_receipt


class DessertShop:
    def user_prompt_candy(self):
        name = input("Enter the type of candy: ").strip()
        weight = float(input("Enter the weight (in lbs): "))
        price_per_lb = float(input("Enter the price per pound: "))
        return Candy(name, weight, price_per_lb)

    def user_prompt_cookie(self):
        name = input("Enter the type of cookie: ").strip()
        quantity = int(input("Enter the quantity purchased: "))
        price_per_dozen = float(input("Enter the price per dozen: "))
        return Cookie(name, quantity, price_per_dozen)

    def user_prompt_icecream(self):
        name = input("Enter the type of ice cream: ").strip()
        scoops = int(input("Enter the number of scoops: "))
        price_per_scoop = float(input("Enter the price per scoop: "))
        return IceCream(name, scoops, price_per_scoop)

    def user_prompt_sundae(self):
        name = input("Enter the type of ice cream: ").strip()
        scoops = int(input("Enter the number of scoops: "))
        price_per_scoop = float(input("Enter the price per scoop: "))
        topping_name = input("Enter the topping name: ").strip()
        topping_price = float(input("Enter the topping price: "))
        return Sundae(name, scoops, price_per_scoop, topping_name, topping_price)


def main():
    shop = DessertShop()
    order = Order()

    while True:
        choice = input(
            "\n1: Candy\n2: Cookie\n3: Ice Cream\n4: Sundae\n"
            "What would you like to add to the order? (1-4, Enter for done): "
        ).strip()

        if not choice:
            break

        match choice:
            case '1':
                order.add(shop.user_prompt_candy())
            case '2':
                order.add(shop.user_prompt_cookie())
            case '3':
                order.add(shop.user_prompt_icecream())
            case '4':
                order.add(shop.user_prompt_sundae())
            case _:
                print("Invalid choice, please try again.")

    # Print the order summary
    print(order)

    # Generate the PDF receipt
    order_items = [
        {
            "name": item.name,
            "cost": f"${item.calculate_cost():.2f}",
            "tax": f"${item.calculate_tax():.2f}"
        }
        for item in order.items
    ]
    subtotal = f"${order.calculate_subtotal():.2f}"
    tax = f"${order.calculate_total_tax():.2f}"
    total = f"${order.calculate_total_cost():.2f}"
    generate_receipt(order_items, subtotal, tax, total, len(order.items))


if __name__ == "__main__":
    main()










DESSERT SHOP 6
[packing.py]
from typing import Protocol

class Packaging(Protocol):
    packaging: str

[desserts.py]
from packaging import Packaging

class DessertItem(Packaging):
    def __init__(self, name: str):
        self.name = name
        self.packaging = None  # Default value

for the candy-
class Candy(DessertItem):
    def __init__(self, name: str, weight: float, price_per_lb: float):
        super().__init__(name)
        self.weight = weight
        self.price_per_lb = price_per_lb
        self.packaging = "Bag"

    def __str__(self):
        cost = self.weight * self.price_per_lb
        tax = cost * 0.07
        return (f"{self.name} ({self.packaging})\n"
                f"      {self.weight:.2f} lbs. @ ${self.price_per_lb:.2f}/lb.: "
                f"${cost:.2f}           [Tax: ${tax:.2f}]")


cookie-
class Cookie(DessertItem):
    def __init__(self, name: str, quantity: int, price_per_dozen: float):
        super().__init__(name)
        self.quantity = quantity
        self.price_per_dozen = price_per_dozen
        self.packaging = "Box"

    def __str__(self):
        cost = (self.quantity / 12) * self.price_per_dozen
        tax = cost * 0.07
        return (f"{self.name} ({self.packaging})\n"
                f"      {self.quantity} cookies @ ${self.price_per_dozen:.2f}/dozen: "
                f"${cost:.2f}           [Tax: ${tax:.2f}]")

icecream-
class IceCream(DessertItem):
    def __init__(self, name: str, scoops: int, price_per_scoop: float):
        super().__init__(name)
        self.scoops = scoops
        self.price_per_scoop = price_per_scoop
        self.packaging = "Bowl"

    def __str__(self):
        cost = self.scoops * self.price_per_scoop
        tax = cost * 0.07
        return (f"{self.name} ({self.packaging})\n"
                f"      {self.scoops} scoops @ ${self.price_per_scoop:.2f}/scoop: "
                f"${cost:.2f}           [Tax: ${tax:.2f}]")

sundae-
class Sundae(IceCream):
    def __init__(self, name: str, scoops: int, price_per_scoop: float, topping: str, topping_price: float):
        super().__init__(name, scoops, price_per_scoop)
        self.topping = topping
        self.topping_price = topping_price
        self.packaging = "Boat"

    def __str__(self):
        ice_cream_cost = self.scoops * self.price_per_scoop
        total_cost = ice_cream_cost + self.topping_price
        tax = total_cost * 0.07
        return (f"{self.name} ({self.packaging})\n"
                f"      {self.scoops} scoops of {self.name} ice cream @ ${self.price_per_scoop:.2f}/scoop\n"
                f"      {self.topping} topping @ ${self.topping_price:.2f}: "
                f"${total_cost:.2f}           [Tax: ${tax:.2f}]")

order-
class Order:
    def __init__(self):
        self.items = []

    def add(self, item: DessertItem):
        self.items.append(item)

    def __str__(self):
        result = []
        for item in self.items:
            result.append(str(item))
        return "\n".join(result)




[dessertshop.py]
from desserts import Order, Candy, Cookie, IceCream, Sundae

def main():
    order = Order()
    print("1: Candy\n2: Cookie\n3: Ice Cream\n4: Sundae")
   
    while True:
        choice = input("What would you like to add to the order? (1-4, Enter for done): ")
        if not choice:
            break
        if choice == "1":
            name = input("Enter the type of candy: ")
            weight = float(input("Enter the weight: "))
            price_per_lb = float(input("Enter the price per pound: "))
            order.add(Candy(name, weight, price_per_lb))
        elif choice == "2":
            name = input("Enter the type of cookie: ")
            quantity = int(input("Enter the quantity purchased: "))
            price_per_dozen = float(input("Enter the price per dozen: "))
            order.add(Cookie(name, quantity, price_per_dozen))
        elif choice == "3":
            name = input("Enter the type of ice cream: ")
            scoops = int(input("Enter the number of scoops: "))
            price_per_scoop = float(input("Enter the price per scoop: "))
            order.add(IceCream(name, scoops, price_per_scoop))
        elif choice == "4":
            name = input("Enter the type of ice cream: ")
            scoops = int(input("Enter the number of scoops: "))
            price_per_scoop = float(input("Enter the price per scoop: "))
            topping = input("Enter the kind of topping used: ")
            topping_price = float(input("Enter the price for the topping: "))
            order.add(Sundae(name, scoops, price_per_scoop, topping, topping_price))

    print("\n----------------------------------------------Receipt---------------------------")
    print(order)

